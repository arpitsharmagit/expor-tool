{"version":3,"sources":["lib/util/ProgressStream.js"],"names":[],"mappings":";;;;;;;;;;AAAA,WAAW,CAAC;AACZ,YAAY,CAAC;;AAGb,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC;IAC1B,WAAW,GAAG,OAAO,CAAC,aAAa,CAAC;IACpC,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;IAEpB,cAAc;AACN,WADR,cAAc,GACS;;;QAAd,OAAO,gCAAG,EAAE;;0BADrB,cAAc;;AAEhB,+BAFE,cAAc,6CAEV,OAAO,EAAE;;AAEf,QAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AACvD,QAAI,CAAC,KAAK,GAAG,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;AACpD,QAAI,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;;AAG5B,QAAI,KAAK,GAAG;AACV,gBAAU,EAAE,CAAC;AACf,iBAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,WAAW;AACtC,YAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM;AAC5B,eAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM;AAC/B,SAAG,EAAE,CAAC;AACN,aAAO,EAAE,CAAC;KACT,CAAC;;AAEF,QAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;AACxE,QAAI,oBAAoB,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AAC9D,QAAI,CAAC,WAAW,GAAG,CAAC,CAAC,QAAQ,CAAC,oBAAoB,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;;;AAG5E,QAAI,CAAC,EAAE,CAAC,KAAK,EAAE,YAAM;AACnB,YAAK,WAAW,CAAC,MAAM,EAAE,CAAC;AAC1B,0BAAoB,CAAC,IAAI,CAAC,CAAC;KAC5B,CAAC,CAAC;;AAGH,QAAI,CAAC,EAAE,CAAC,MAAM,EAAE,UAAC,GAAG,EAAK;;AAEvB,OAAC,CAAC,IAAI,CAAC,GAAG,EAAE,UAAC,GAAG,EAAE,GAAG,EAAK;AACxB,YAAI,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,UAAQ,AAAC,EAAE;AACxD,gBAAK,GAAG,CAAC,GAAG,GAAG,CAAC;SACjB;OACF,CAAC,CAAC;;AAEH,UAAI,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;AAC1B,cAAK,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;OAC1B,MAAM,IAAI,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,EAAE;AAC3E,cAAK,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;OACtD;;AAED,SAAG,CAAC,EAAE,CAAC,UAAU,EAAE,UAAC,GAAG,EAAK;AAC1B,YAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE;AAAE,iBAAO;SAAE;AACvC,YAAI,GAAG,CAAC,OAAO,CAAC,kBAAkB,CAAC,KAAK,MAAM,EAAE;AAAE,iBAAO;SAAE;AAC3D,YAAI,GAAG,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE;AAClC,gBAAK,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;SACtD;OACA,CAAC,CAAC;KAEJ,CAAC,CAAC;;AAEH,UAAM,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE;AACpC,SAAG,EAAE;eAAM,MAAK,QAAQ,CAAC,MAAM;OAAA;AAC/B,SAAG,EAAE,UAAC,GAAG,EAAK;AACZ,cAAK,QAAQ,CAAC,MAAM,GAAG,GAAG,CAAC;AAC3B,aAAK,CAAC,MAAM,GAAG,GAAG,CAAC;AACnB,cAAK,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;OAC1B;AACD,gBAAU,EAAE,IAAI;KACjB,CAAC,CAAC;GAEJ;;YA/DG,cAAc;;eAAd,cAAc;AAgElB,eAAW;aAAA,qBAAC,KAAK,EAAE,KAAK,EAAE;;AAExB,aAAK,CAAC,UAAU,GAAG,KAAK,GAAG,GAAG,GAAI,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,WAAW,GAAC,KAAK,CAAC,MAAM,GAAC,GAAG,GAAG,CAAC,AAAC,CAAC;AACzF,aAAK,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAC5B,aAAK,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;AACtD,aAAK,CAAC,OAAO,GAAG,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,SAAS,CAAA,GAAE,IAAI,CAAC,CAAC;AAC/D,YAAI,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;OAC5B;;AACD,WAAO;aAAA,iBAAC,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE;AAC/B,YAAI,GAAG,GAAG,UAAU,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM;YAClC,WAAW,GAAG,KAAK,CAAC,WAAW,IAAI,GAAG,CAAC;AAC3C,aAAK,CAAC,WAAW,GAAG,WAAW,CAAC;AAChC,aAAK,CAAC,SAAS,GAAG,KAAK,CAAC,MAAM,IAAI,WAAW,GAAG,KAAK,CAAC,MAAM,GAAG,WAAW,GAAG,CAAC,CAAC;AAC/E,YAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;AAEhB,YAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;OAEzB;;AACD,cAAU;aAAC,oBAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE;;AAEpC,YAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;AAEnB,YAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAChB,gBAAQ,EAAE,CAAC;OACZ;;AACD,UAAM;aAAC,gBAAC,QAAQ,EAAE;AAChB,YAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;;AAEvB,gBAAQ,EAAE,CAAC;OACZ;;AACG,YAAQ;WAAC,YAAG;AACd,eAAO;AACL,kBAAQ,EAAE,IAAI;AACd,gBAAM,EAAE,CAAC;AACT,qBAAW,EAAE,CAAC;AACd,qBAAW,EAAE,IAAI;SAClB,CAAC;OACH;;;;SArGG,cAAc;GAAS,MAAM,CAAC,SAAS;;AAwG7C,MAAM,CAAC,OAAO,GAAG,cAAc,CAAC","file":"lib/util/ProgressStream.js","sourcesContent":["'use babel';\r\n'use strict';\r\n\r\n\r\nvar stream = require('stream'),\r\n    speedometer = require('speedometer'),\r\n    _ = require('lodash');\r\n\r\nclass ProgressStream extends stream.Transform {\r\n  constructor (options = {}) {\r\n    super(options);\r\n\r\n    this.settings = _.defaults({}, options, this.defaults);\r\n    this.speed = speedometer(this.settings.speedWindow);\r\n    this.startTime = Date.now();\r\n\r\n\r\n    var stats = {\r\n      percentage: 0,\r\n  \t\ttransferred: this.settings.transferred,\r\n  \t\tlength: this.settings.length,\r\n  \t\tremaining: this.settings.length,\r\n  \t\teta: 0,\r\n  \t\truntime: 0\r\n    };\r\n\r\n    this._update = this._update.bind(this, stats, this.settings.objectMode);\r\n    let immediateUpdateStats = this.updateStats.bind(this, stats);\r\n    this.updateStats = _.throttle(immediateUpdateStats, this.settings.interval);\r\n\r\n    // on end immediately send progress event, and cancel pending\r\n    this.on('end', () => {\r\n      this.updateStats.cancel();\r\n      immediateUpdateStats(true);\r\n    });\r\n\r\n\r\n    this.on('pipe', (src) => {\r\n\r\n      _.each(src, (val, key) => {\r\n        if (_.isString(val) || _.isNumber(val) && !(key in this)) {\r\n          this[key] = val;\r\n        }\r\n      });\r\n\r\n      if (_.isNumber(src.length)) {\r\n        this.length = src.length;\r\n      } else if (_.isObject(src.headers) && !isNaN(src.headers['content-length'])) {\r\n        this.lenth = parseInt(src.headers['content-length']);\r\n      }\r\n\r\n      src.on('response', (res) => {\r\n        if (!res || !res.headers) { return; }\r\n    \t\tif (res.headers['content-encoding'] === 'gzip') { return; }\r\n    \t\tif (res.headers['content-length']) {\r\n    \t\t\tthis.length = parseInt(res.headers['content-length']);\r\n    \t\t}\r\n      });\r\n\r\n    });\r\n\r\n    Object.defineProperty(this, 'length', {\r\n      get: () => this.settings.length,\r\n      set: (val) => {\r\n        this.settings.length = val;\r\n        stats.length = val;\r\n        this.emit('length', val);\r\n      },\r\n      enumerable: true\r\n    });\r\n\r\n  }\r\n  updateStats(stats, ended) {\r\n\r\n    stats.percentage = ended ? 100 : (stats.length ? stats.transferred/stats.length*100 : 0);\r\n    stats.speed = this.speed(0);\r\n    stats.eta = Math.round(stats.remaining / stats.speed);\r\n    stats.runtime = parseInt((Date.now() - this.startTime)/1000);\r\n\t\tthis.emit('progress', stats);\r\n  }\r\n  _update(stats, objectMode, data) {\r\n    var len = objectMode ? 1 : data.length,\r\n        transferred = stats.transferred += len;\r\n    stats.transferred = transferred;\r\n    stats.remaining = stats.length >= transferred ? stats.length - transferred : 0;\r\n    this.speed(len);\r\n\r\n    this.updateStats(false);\r\n\r\n  }\r\n  _transform (data, encoding, callback) {\r\n\r\n    this._update(data);\r\n\r\n    this.push(data);\r\n    callback();\r\n  }\r\n  _flush (callback) {\r\n    this.updateStats(true);\r\n\r\n    callback();\r\n  }\r\n  get defaults () {\r\n    return {\r\n      interval: 1000,\r\n      length: 0,\r\n      transferred: 0,\r\n      speedWindow: 5000\r\n    };\r\n  }\r\n}\r\n\r\nmodule.exports = ProgressStream;\r\n"]}
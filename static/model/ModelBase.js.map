{"version":3,"sources":["lib/model/ModelBase.js"],"names":[],"mappings":"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","file":"lib/model/ModelBase.js","sourcesContent":["'use babel';\r\n'use strict';\r\n\r\nvar _ = require('lodash'),\r\n    $js = require('JSONSelect'),\r\n    Logger = require('../util/Logger'),\r\n    log = new Logger('migrate-model'),\r\n    modelRegistry = new Map(),\r\n    registry = {\r\n      by: {\r\n        vendorType: new Map(),\r\n        revType: new Map()\r\n      },\r\n      models: modelRegistry\r\n    };\r\n_.mixin(require('../util/lodashMixins'));\r\n\r\nlog.setLevel(Logger.INFO);\r\n\r\n// TODO: should data be stored in this.properties or in this.datastore?\r\n\r\nclass ModelBase {\r\n  constructor (data) {\r\n    var self = this;\r\n        //ThisClass = this.constructor;\r\n\r\n    if (_.isObject(data)) {\r\n\r\n      let schema = this.schema,\r\n          keys = _.keys(schema),\r\n          properties = _.pick(data, keys);\r\n\r\n      //this.datastore = DataStoreModel.create(properties);\r\n      _.each(properties, (value, key) => {\r\n        self[key] = value;\r\n      });\r\n\r\n    }\r\n\r\n  }\r\n  static register() {\r\n    var key = this.className;\r\n    if (modelRegistry.has(key)) {\r\n      log.debug('model has already been registered: ' + key);\r\n      return this;\r\n    }\r\n    modelRegistry.set(key, this);\r\n    let vendorType = _.bubble(this.vendorType);\r\n    for (let type of vendorType) {\r\n      registry.by.vendorType.set(type, this);\r\n    }\r\n    registry.by.revType.set(this.revType, this);\r\n    log.debug(`registered model ${vendorType.join(\",\")}`);\r\n    return this;\r\n  }\r\n  static getModelForVendorType (obj) {\r\n    var matches = [];\r\n\r\n    for (let [vendorType, ModelClass] of registry.by.vendorType) {\r\n      if (vendorType in obj) {\r\n        matches.push(ModelClass);\r\n      }\r\n    }\r\n\r\n    if (matches.length > 1) {\r\n      log.warn('multiple class matches for vendor object', obj, matches);\r\n    }\r\n    return matches[0];\r\n  }\r\n  static getModelByClassName (name) {\r\n    return modelRegistry.get(name);\r\n  }\r\n  static get registry () {\r\n    return registry;\r\n  }\r\n  toJSON () {\r\n    let keys = _.keys(this.schema);\r\n    let result = _.clone(_.pick(this, keys), (value) => {\r\n      if (_.isArray(value) && value[0] instanceof ModelBase) {\r\n        return _.invoke(value, 'toJSON');\r\n\r\n      } else if (value instanceof ModelBase) {\r\n        return value.toJSON.call(value);\r\n\r\n      } else {\r\n        return undefined; // let lodash handle\r\n      }\r\n    });\r\n    result.__model = this.__model;\r\n    return result;\r\n  }\r\n  toString () {\r\n    //return this.datastore.toString();\r\n    return JSON.stringify(this.toJSON());\r\n  }\r\n  toRevData () {\r\n    let revSchema = _.pick(this.schema, (v) => v.revKey),\r\n        result = {};\r\n\r\n    _.each(revSchema, (spec, key) => {\r\n      let value = this[key];\r\n      if (spec.revTransform) {\r\n        value = spec.revTransform.call(this, value);\r\n      } else if (_.isArray(value) && value[0] instanceof ModelBase) {\r\n        value = _.invoke(value, 'toRevData');\r\n      } else if (value instanceof ModelBase) {\r\n        value = value.toRevData.call(value);\r\n      }\r\n\r\n      if (!_.isUndefined(value)) {\r\n        result[spec.revKey] = value;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  get schema () {\r\n    return this.constructor.schema;\r\n  }\r\n  get __model () {\r\n    return this.constructor.className;\r\n  }\r\n  static get className () {\r\n    log.warn('subclass must implement className');\r\n    return this.name;\r\n  }\r\n  static get vendorType () {\r\n    log.warn('subclass must implement selector');\r\n  }\r\n  static get revType () {\r\n    return 'modelbase';\r\n  }\r\n  static get dbType () {\r\n    return 'base';\r\n  }\r\n  static get schema () {\r\n    log.warn('superclass called for schema, should be subclass');\r\n  }\r\n\r\n  // goes through the defined schema, finds the necessary values for each defined property, transforming as necessary.  Input should be cisco object, not cisco request (i.e. if vpuser: data just send in data)\r\n  /*\r\n  static fromDataStore (data) {\r\n    // constructor handles translating\r\n    var ThisClass = this;\r\n    return new ThisClass(data);\r\n  }\r\n  */\r\n  static fromVendorObject (data) {\r\n    // this in context refers to class constructor\r\n    var ThisClass = this,\r\n        schema = this.schema,\r\n        $ = $js.match.bind($js),\r\n        classSelectors = _.bubble(this.vendorType).map((type) => ':root > .' + type),\r\n        result = {};\r\n\r\n\r\n    // first, test if this a root that contains this class, or if it's the class data itself\r\n    let classMatches = _.flatten(classSelectors.map( (selector) => $(selector, data)));\r\n    if (classMatches.length) {\r\n      // will always return a single result, which may or may not be an array -- make flat array\r\n      classMatches = _.bubble(_.unbubble(classMatches));\r\n      result = classMatches.map(this.fromVendorObject.bind(this));\r\n\r\n      // unbubble single result\r\n      return _.unbubble(result);\r\n    }\r\n    /***************/\r\n\r\n    for(let key in schema) {\r\n      let spec = schema[key],\r\n          value;\r\n      // selector tells us the cisco object has this value\r\n      if (!spec.selector) { continue; }\r\n\r\n      // uses JSON schema to find data in input\r\n      let selector = ':root ' + spec.selector,\r\n          matches = $(selector, data);\r\n\r\n      if (!matches.length) {\r\n        if (!spec.optional) {\r\n          log.debug('nomatch', key, spec, data);\r\n        }\r\n        continue;\r\n      }\r\n\r\n      // unbubble single results\r\n      value = _.unbubble(matches);\r\n\r\n      if (value === '') {\r\n        continue;\r\n      }\r\n\r\n      // optionally convert value\r\n      if (spec.transform) {\r\n        value = spec.transform.call(this, value);\r\n      }\r\n\r\n      result[key] = value;\r\n    }\r\n\r\n    // don't return for empty content\r\n    if (!_.keys(result).length) {\r\n      return undefined;\r\n    }\r\n\r\n    return new ThisClass(result);\r\n  }\r\n\r\n  static fromRev (data) {\r\n    // this in context refers to class constructor\r\n    var ThisClass = this,\r\n        schema = this.schema,\r\n        result = {};\r\n\r\n    if (_.isArray(data)) {\r\n      result = data.map(this.fromRev.bind(this));\r\n      //return _.unbubble(result);\r\n      return result;\r\n    }\r\n\r\n    _.each(schema, (spec, modelKey) => {\r\n      if (spec.revKey && (spec.revKey in data)) {\r\n        let val = data[spec.revKey];\r\n        if (spec.__model) {\r\n          let SpecClass = ModelBase.getModelByClassName(spec.__model);\r\n          result[modelKey] = SpecClass.fromRev(val);\r\n        } else {\r\n          result[modelKey] = val;\r\n        }\r\n      }\r\n    });\r\n\r\n    return new ThisClass(result);\r\n  }\r\n\r\n  static fromJSON (data) {\r\n    // this in context refers to class constructor\r\n    var ThisClass = this,\r\n        schema = this.schema,\r\n        result = {};\r\n\r\n    if (_.isArray(data)) {\r\n      result = data.map(this.fromJSON.bind(this));\r\n      //return _.unbubble(result);\r\n      return result;\r\n    }\r\n\r\n    _.each(data, (value, key) => {\r\n      let spec = schema[key];\r\n\r\n      if (!spec) { return; }\r\n\r\n      // transform to Model\r\n      if (spec.__model) {\r\n        let SpecClass = ModelBase.getModelByClassName(spec.__model);\r\n        result[key] = SpecClass.fromJSON(value);\r\n      } else {\r\n        result[key] = value;\r\n      }\r\n\r\n    });\r\n\r\n    return new ThisClass(result);\r\n\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = ModelBase;\r\n"]}
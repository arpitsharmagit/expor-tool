{"version":3,"sources":["lib/model/UserGroup.js"],"names":[],"mappings":";;;;;;;;;;AAAA,WAAW,CAAC;AACZ,YAAY,CAAC;;AAEb,IAAI,SAAS,GAAG,OAAO,CAAC,aAAa,CAAC;IAClC,OAAO;IAAE,MAAM,CAAC;;AAEpB,OAAO,GAAG;AACT,aAAW,EAAE,qBAAU,SAAS,EAAE;AACjC,WAAO,UAAU,GAAG,EAAE;AAAE,aAAO,GAAG,IAAI,SAAS,CAAC;KAAE,CAAC;GACnD;AACD,WAAS,EAAE,mBAAU,GAAG,EAAE;AACzB,WAAO,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;GACzB;CACD,CAAC;;AAGF,MAAM,GAAG;AACP,UAAQ,EAAE;AACR,WAAO,EAAE,IAAI;AACb,YAAQ,EAAE,OAAO;AACjB,aAAS,EAAE,OAAO,CAAC,SAAS;GAC7B;AACD,MAAI,EAAE;AACJ,YAAQ,EAAE,SAAS;AACnB,UAAM,EAAE,MAAM;GACf;AACD,cAAY,EAAE;AACZ,UAAM,EAAE,cAAc;GACvB;AACD,QAAM,EAAE;AACN,UAAM,EAAE,UAAU;GACnB;AACD,OAAK,EAAE;AACL,UAAM,EAAE,SAAS;GAClB;AACD,aAAW,EAAE;AACX,YAAQ,EAAE,gBAAgB;AAC1B,UAAM,EAAE,aAAa;GACtB;AACD,eAAa,EAAE;AACb,YAAQ,EAAE,kBAAkB;AAC5B,aAAS,EAAE,OAAO,CAAC,SAAS;GAC7B;AACD,WAAS,EAAE;AACT,YAAQ,EAAE,cAAc;AACxB,aAAS,EAAE,OAAO,CAAC,SAAS;GAC7B;AACD,aAAW,EAAE;AACX,YAAQ,EAAE,gBAAgB;AAC1B,aAAS,EAAE,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC;GACvC;AACD,WAAS,EAAE;AACT,YAAQ,EAAE,cAAc;GACzB;CACF,CAAC;;;;IAKI,SAAS;AACD,WADR,SAAS,CACA,IAAI,EAAE;0BADf,SAAS;;AAEX,+BAFE,SAAS,6CAEL,IAAI,EAAE;GAEb;;YAJG,SAAS;;eAAT,SAAS;AAMF,aAAS;WAAC,YAAG;AACtB,eAAO,WAAW,CAAC;OACpB;;AACU,cAAU;WAAC,YAAG;AACvB,eAAO,CAAC,aAAa,EAAC,WAAW,CAAC,CAAC;OACpC;;AACU,WAAO;WAAC,YAAG;AACpB,eAAO,YAAY,CAAC;OACrB;;AACU,UAAM;WAAC,YAAG;AACnB,eAAO,MAAM,CAAC;OACf;;;;SAjBG,SAAS;GAAS,SAAS;;AAoBjC,SAAS,CAAC,QAAQ,EAAE,CAAC;;AAErB,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC","file":"lib/model/UserGroup.js","sourcesContent":["'use babel';\r\n'use strict';\r\n\r\nvar ModelBase = require('./ModelBase'),\r\n    helpers, schema;\r\n\r\nhelpers = {\r\n\ttestEqualTo: function (testValue) {\r\n\t\treturn function (val) { return val == testValue; };\r\n\t},\r\n\ttoInteger: function (val) {\r\n\t\treturn parseInt(val, 10);\r\n\t}\r\n};\r\n\r\n\r\nschema = {\r\n  vendorId: {\r\n    require: true,\r\n    selector: '> .id',\r\n    transform: helpers.toInteger\r\n  },\r\n  name: {\r\n    selector: '> .name',\r\n    revKey: 'name'\r\n  },\r\n  collectionId: {\r\n    revKey: 'collectionId'\r\n  },\r\n  groups: {\r\n    revKey: 'groupIds'\r\n  },\r\n  users: {\r\n    revKey: 'userIds'\r\n  },\r\n  description: {\r\n    selector: '> .description',\r\n    revKey: 'description'\r\n  },\r\n  parentGroupId: {\r\n    selector: '> .parentGroupId',\r\n    transform: helpers.toInteger\r\n  },\r\n  userCount: {\r\n    selector: '> .userCount',\r\n    transform: helpers.toInteger\r\n  },\r\n  isShareable: {\r\n    selector: '> .isShareable',\r\n    transform: helpers.testEqualTo('true')\r\n  },\r\n  createdBy: {\r\n    selector: '> .createdBy'\r\n  }\r\n};\r\n\r\n\r\n\r\n// TODO: this assumes data's either coming from db or Cisco.  Do I need a method of detecting Rev data for import?\r\nclass UserGroup extends ModelBase {\r\n  constructor (data) {\r\n    super(data);\r\n\r\n  }\r\n\r\n  static get className () {\r\n    return 'UserGroup';\r\n  }\r\n  static get vendorType () {\r\n    return ['vpusergroup','usergroup'];\r\n  }\r\n  static get revType () {\r\n    return 'collection';\r\n  }\r\n  static get schema () {\r\n    return schema;\r\n  }\r\n}\r\n\r\nUserGroup.register();\r\n\r\nmodule.exports = UserGroup;\r\n"]}
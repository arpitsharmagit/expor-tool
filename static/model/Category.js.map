{"version":3,"sources":["lib/model/Category.js"],"names":[],"mappings":"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","file":"lib/model/Category.js","sourcesContent":["'use babel';\r\n'use strict';\r\n\r\nvar ModelBase = require('./ModelBase');\r\n\r\nconst ROOT_PATH = '/dms/core/contentcatalog/vportal/1';\r\nconst ROOT_PATH_REGEX = new RegExp(ROOT_PATH + '\\/?$');\r\n\r\nvar schema = {\r\n  name: {\r\n    require: true,\r\n    selector: '> .name',\r\n    revKey: 'name'\r\n  },\r\n  categoryId: {\r\n    revKey: 'categoryId'\r\n  },\r\n  parentCategoryId: {\r\n    revKey: 'parentCategoryId'\r\n  },\r\n  path: {\r\n    selector: '> .path',\r\n    revKey: 'fullPath',\r\n    revTransform: function (value) {\r\n      return (value || '').replace(ROOT_PATH + '/', '');\r\n    }\r\n  },\r\n  parentpath: {\r\n    selector: '> .parentpath',\r\n    optional: true\r\n  },\r\n  ciscoCategoryId: {\r\n    selector: '> .categoryid',\r\n    optional: true\r\n  },\r\n  children: {\r\n    __model: 'Category',\r\n    optional: true,\r\n    type: 'object',\r\n    associationType: 'hasMany',\r\n    name: 'Children',\r\n    selector: '> .child',\r\n    transform: function (value) {\r\n      var ThisClass = this;\r\n      if (!Array.isArray(value)) {\r\n        value = [value];\r\n      }\r\n\r\n      return value.map(ThisClass.fromVendorObject.bind(this));\r\n\r\n    }\r\n  }\r\n};\r\n\r\n\r\n// TODO: this assumes data's either coming from db or Cisco.  Do I need a method of detecting Rev data for import?\r\nclass Category extends ModelBase {\r\n  constructor (data) {\r\n    super(data);\r\n\r\n  }\r\n\r\n  // categories are returned nested from Cisco, so this gets them as flat array\r\n  flatten () {\r\n    var result = [this];\r\n\r\n    if (this.children) {\r\n      let flatChildren = this.children.reduce( (aggregate, child) => {\r\n        return [].concat(aggregate, child.flatten.call(child));\r\n      });\r\n      result = result.concat(flatChildren);\r\n    }\r\n\r\n    return result;\r\n  }\r\n  // root category has no parent\r\n  get isRootCategory () {\r\n    return Category.isRootCategoryCheck(this.path);\r\n  }\r\n  // root will only have slash at end\r\n  static isRootCategoryCheck (path) {\r\n    return ROOT_PATH_REGEX.test(path);\r\n  }\r\n  static get className () {\r\n    return 'Category';\r\n  }\r\n  static get vendorType () {\r\n    return 'vpcategory';\r\n  }\r\n  static get revType () {\r\n    return 'category';\r\n  }\r\n  static get schema () {\r\n    return schema;\r\n  }\r\n}\r\n\r\nCategory.register();\r\n\r\nmodule.exports = Category;\r\n\r\n/*\r\n  c = new Category({name: 'parent'});\r\n  d = new Category({name: 'child'});\r\n  c.datastore.save(log.log);\r\n  c.datastore.addChild(d.datastore);\r\n\r\n  c.datastore.save(log.log)\r\n\r\n  c.datastore.getChildren(log.log)\r\n\r\n*/\r\n"]}
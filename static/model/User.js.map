{"version":3,"sources":["lib/model/User.js"],"names":[],"mappings":";;;;;;;;;;AAAA,WAAW,CAAC;AACZ,YAAY,CAAC;;AAEb,IAAI,SAAS,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;;AAEvC,IAAI,MAAM,GAAG;AACX,UAAQ,EAAE;AACR,YAAQ,EAAE,IAAI;AACd,YAAQ,EAAE,aAAa;AACvB,UAAM,EAAE,UAAU;GACnB;AACD,WAAS,EAAE;AACT,YAAQ,EAAE,cAAc;AACxB,UAAM,EAAE,WAAW;GACpB;AACD,UAAQ,EAAE;AACR,YAAQ,EAAE,aAAa;AACvB,UAAM,EAAE,UAAU;GACnB;AACD,OAAK,EAAE;AACL,YAAQ,EAAE,IAAI;AACd,YAAQ,EAAE,cAAc;AACxB,UAAM,EAAE,OAAO;GAChB;AACD,SAAO,EAAE;AACP,YAAQ,EAAE,gBAAgB;GAC3B;AACD,OAAK,EAAE;AACL,UAAM,EAAE,OAAO;GAChB;AACD,OAAK,EAAE;AACL,YAAQ,EAAE,cAAc;AACxB,UAAM,EAAE,OAAO;GAChB;AACD,UAAQ,EAAE;AACR,YAAQ,EAAE,eAAe;AACzB,UAAM,EAAE,UAAU;AAClB,aAAS,EAAE,mBAAU,KAAK,EAAE;;AAE1B,aAAO,KAAK,CAAC;KACd;GACF;AACD,aAAW,EAAE;AACX,YAAQ,EAAE,IAAI;AACd,YAAQ,EAAE,WAAW;GACtB;AACD,YAAU,EAAE;AACV,QAAI,EAAE,QAAQ;AACd,YAAQ,EAAE,sCAAsC;GACjD;AACD,QAAM,EAAE;AACN,UAAM,EAAE,IAAI;GACb;AACD,SAAO,EAAE;AACP,UAAM,EAAE,SAAS;GAClB;AACD,OAAK,EAAE;AACL,UAAM,EAAE,SAAS;GAClB;CACF,CAAC;;;;IAGI,IAAI;AACI,WADR,IAAI,CACK,IAAI,EAAE;0BADf,IAAI;;AAEN,+BAFE,IAAI,6CAEA,IAAI,EAAE;GAEb;;YAJG,IAAI;;eAAJ,IAAI;AAMG,aAAS;WAAC,YAAG;AACtB,eAAO,MAAM,CAAC;OACf;;AACU,cAAU;WAAC,YAAG;AACvB,eAAO,QAAQ,CAAC;OACjB;;AACU,WAAO;WAAC,YAAG;AACpB,eAAO,MAAM,CAAC;OACf;;AACU,UAAM;WAAC,YAAG;AACnB,eAAO,MAAM,CAAC;OACf;;;;SAjBG,IAAI;GAAS,SAAS;;;AAqB5B,IAAI,CAAC,QAAQ,EAAE,CAAC;;AAEhB,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC","file":"lib/model/User.js","sourcesContent":["'use babel';\r\n'use strict';\r\n\r\nvar ModelBase = require('./ModelBase');\r\n\r\nvar schema = {\r\n  username: {\r\n    required: true,\r\n    selector: '> .username',\r\n    revKey: 'username'\r\n  },\r\n  firstname: {\r\n    selector: '> .firstname',\r\n    revKey: 'firstName'\r\n  },\r\n  lastname: {\r\n    selector: '> .lastname',\r\n    revKey: 'lastName'\r\n  },\r\n  email: {\r\n    required: true,\r\n    selector: '> .useremail',\r\n    revKey: 'email'\r\n  },\r\n  company: {\r\n    selector: '> .usercompany'\r\n  },\r\n  title: {\r\n    revKey: 'title'\r\n  },\r\n  phone: {\r\n    selector: '> .userphone',\r\n    revKey: 'phone'\r\n  },\r\n  language: {\r\n    selector: '> .userlocale',\r\n    revKey: 'language',\r\n    transform: function (value) {\r\n      // TODO language/locale tranform not implemented\r\n      return value;\r\n    }\r\n  },\r\n  ciscoUserID: {\r\n    required: true,\r\n    selector: '> .userid'\r\n  },\r\n  ciscoRoles: {\r\n    type: 'object',\r\n    selector: '> .assignedRoles > object > .roleDef'\r\n  },\r\n  userId: {\r\n    revKey: 'id'\r\n  },\r\n  inboxId: {\r\n    revKey: 'inboxId'\r\n  },\r\n  roles: {\r\n    revKey: 'roleIds'\r\n  }\r\n};\r\n\r\n// TODO: this assumes data's either coming from db or Cisco.  Do I need a method of detecting Rev data for import?\r\nclass User extends ModelBase {\r\n  constructor (data) {\r\n    super(data);\r\n\r\n  }\r\n\r\n  static get className () {\r\n    return 'User';\r\n  }\r\n  static get vendorType () {\r\n    return 'vpuser';\r\n  }\r\n  static get revType () {\r\n    return 'user';\r\n  }\r\n  static get schema () {\r\n    return schema;\r\n  }\r\n}\r\n\r\n// register model type with ModelBase registry\r\nUser.register();\r\n\r\nmodule.exports = User;\r\n"]}